---
### ОБЩЕЕ ######################################################################
# echo '/pub *(rw,sync,no_subtree_check,all_squash)' >/etc/exports
### PROMETHEUS #################################################################
apiVersion: v1
kind: Namespace
metadata:
  name: my-monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: my-monitoring
  name: prometheus
data:
  prometheus.yml: |-
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
    rule_files:
      # - "first.rules"
      # - "second.rules"
    scrape_configs:
    - job_name: 'prometheus2'
      metrics_path: /prometheus/metrics
      static_configs:
      - targets: ['localhost:9090']
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter-svc'
        action: keep
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: my-monitoring
  name: prometheus-deploy
spec:
  # replicas: 1
  #enableAdminAPI: false
  selector:
    matchLabels:
      name: prometheus-deploy
  template:
    metadata:
      labels:
        name: prometheus-deploy
    spec:
      serviceAccountName: monitoring-service-account
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus/
            - --web.external-url=/prometheus/
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: configmap
              mountPath: /etc/prometheus/
            - name: nfs
              mountPath: /prometheus/
      volumes:
        - name: configmap
          configMap:
            defaultMode: 420
            name: prometheus
        - name: nfs
          nfs:
            server: 192.168.1.19
            path: "/pub/prometheus"
---
apiVersion: v1
kind: Service
metadata:
  namespace: my-monitoring
  name: prometheus-svc
spec:
  selector:
    name: prometheus-deploy
  ports:
  - name: http
    protocol: TCP
    port: 9090
    targetPort: 9090
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: my-monitoring
  name: prometheus-ingress
spec:
  rules:
  - http:
      paths:
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-svc
            port:
              number: 9090
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: my-monitoring
  name: node-exporter-deamonset
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: node-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: node-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: node-exporter
    spec:
      containers:
      - args:
        # - --path.sysfs=/host/sys
        # - --path.rootfs=/host/root
        # - --no-collector.wifi
        # - --no-collector.hwmon
        # - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
        # - --collector.netclass.ignored-devices=^(veth.*)$
        name: node-exporter
        image: prom/node-exporter
        ports:
          - containerPort: 9100
            protocol: TCP
      #   volumeMounts:
      #   - mountPath: /host/sys
      #     mountPropagation: HostToContainer
      #     name: sys
      #     readOnly: true
      #   - mountPath: /host/root
      #     mountPropagation: HostToContainer
      #     name: root
      #     readOnly: true
      # volumes:
      # - hostPath:
      #     path: /sys
      #   name: sys
      # - hostPath:
      #     path: /
      #   name: root
---
kind: Service
apiVersion: v1
metadata:
  name: node-exporter-svc
  namespace: my-monitoring
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '9100'
spec:
  selector:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: node-exporter
  ports:
  - name: node-exporter
    protocol: TCP
    port: 9100
    targetPort: 9100
---
apiVersion: v1
kind: ServiceAccount

metadata:
  name: monitoring-service-account
  namespace: my-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitoring-cluster-role
rules:
  - apiGroups: [""]
    resources: ["nodes", "services", "pods", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: ["extensions"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding

metadata:
  name: monitoring-cluster-role-binding

roleRef:
  kind: ClusterRole
  name: monitoring-cluster-role
  apiGroup: rbac.authorization.k8s.io

subjects:
  - kind: ServiceAccount
    name: monitoring-service-account
    namespace: my-monitoring
---
### GRAFANA ####################################################################
apiVersion: v1
kind: Namespace
metadata:
  name: my-grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: my-grafana
  name: grafana-configmap
data:
  grafana.ini: |-
    [server]
    root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana/
    serve_from_sub_path = true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: my-grafana
  name: grafana-app
spec:
  selector:
    matchLabels:
      name: grafana-app
  template:
    metadata:
      labels:
        name: grafana-app
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:9.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          # readinessProbe:
          #   failureThreshold: 3
          #   httpGet:
          #     path: /robots.txt
          #     port: 3000
          #     scheme: HTTP
          #   initialDelaySeconds: 10
          #   periodSeconds: 30
          #   successThreshold: 1
          #   timeoutSeconds: 2
          # livenessProbe:
          #   failureThreshold: 3
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   successThreshold: 1
          #   tcpSocket:
          #     port: 3000
          #   timeoutSeconds: 1
          # resources:
          #   requests:
          #     cpu: 250m
          #     memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: nfs
            - mountPath: /etc/grafana
              name: configmap
      volumes:
      - name: configmap
        configMap:
          defaultMode: 420
          name: grafana-configmap
      - name: nfs
        nfs:
          server: 192.168.1.19
          path: "/pub/grafana"
---
apiVersion: v1
kind: Service
metadata:
  namespace: my-grafana
  name: grafana-svc
spec:
  selector:
    name: grafana-app
  ports:
  - name: http
    protocol: TCP
    port: 3000
    targetPort: http-grafana
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: my-grafana
  name: grafana-ingress
spec:
  rules:
  - http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-svc
            port:
              number: 3000
---
### JUPYTER ####################################################################
# https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html
# https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html
apiVersion: v1
kind: Namespace
metadata:
  name: my-jupyter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: my-jupyter
  name: jupyter-deploy
spec:
  selector:
    matchLabels:
      name: jupyter-deploy
  template:
    metadata:
      labels:
        name: jupyter-deploy
    spec:
      containers:
      - name: jupyter
        image: jupyter/base-notebook
        args:
        - start-notebook.sh
        - --ServerApp.token=''
        - --ServerApp.base_url=/jupyter
        - --ServerApp.root_dir=/home/jovyan/work
        volumeMounts:
        - mountPath: /home/jovyan/work
          name: nfs
      volumes:
      - name: nfs
        nfs:
          server: 192.168.1.19
          path: "/pub/jupyter"
---
apiVersion: v1
kind: Service
metadata:
  namespace: my-jupyter
  name: jupyter-svc
spec:
  selector:
    name: jupyter-deploy
  ports:
  - name: http
    protocol: TCP
    port: 8888
    targetPort: 8888
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: my-jupyter
  name: jupyter-ingress
spec:
  rules:
  - http:
      paths:
      - path: /jupyter
        pathType: Prefix
        backend:
          service:
            name: jupyter-svc
            port:
              number: 8888

