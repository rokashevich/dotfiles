// https://www.jenkins.io/doc/book/pipeline/syntax/#environment
// https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#pipeline-basic-steps
// –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: https://[JENKINS URL]/jenkins/pipeline-syntax/globals

import groovy.json.JsonSlurper
Map tasks = [failFast: false]
def github_repo_size(String repo) {
    println("Hello World!")
    def get = new URL("https://api.github.com/repos/$repo").openConnection();
    def getRC = get.getResponseCode();
    println(getRC);
    if (getRC.equals(200)) {
        def data = get.getInputStream().getText()
        def jsonSlurper = new JsonSlurper()
        def o = jsonSlurper.parseText(data)
        assert o instanceof Map
        return o.size // kb
    }
    return 0
}
def push_to_pushgateway(int size) {
    def post = new URL("http://pushgateway-svc.my-prometheus:9091/pushgateway/metrics/job/cp19").openConnection();
    def message = """# TYPE github_repo_size gauge
# HELP github_repo_size Repo size from github api in KB.
github_repo_size $size
"""
    post.setRequestMethod("POST")
    post.setDoOutput(true)
    post.getOutputStream().write(message.getBytes("UTF-8"));
    def postRC = post.getResponseCode();
    //println(postRC+">>>"+post.getErrorStream().text);
    if (postRC.equals(200)) {
        println(post.getInputStream().getText());
    }
}

pipeline {
  agent any
  options {
    skipDefaultCheckout(true)
  }
  stages {
    stage('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞/–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è'){
      steps{
        script {
          env.HOST_WORKSPACE = env.WORKSPACE.replace(
            env.JENKINS_HOME,env.JENKINS_HOME_HOST_PATH)
          if (!env.GITHUB_TOKEN)
            error("–í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–æ–±—Ä–æ—à–µ–Ω GITHUB_TOKEN!")
        }
      }
    }
    stage('–ù–∞—á–∞–ª—å–Ω–æ–µ/—Ä–∞–∑–æ–≤–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è') {
      when { expression { return !fileExists('.git') }}
      steps {
        sh '''git clone --filter=blob:none --no-checkout \
        https://rokashevich:${GITHUB_TOKEN}@github.com/rokashevich/rokashevich.github.io.git .
        git sparse-checkout set --cone deb
        git checkout main
        cat <<EOF >.gitignore
.gitignore
_*
EOF'''
      }
    }
    stage('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –æ–±—â–µ–µ') {
      steps {
        sh 'env;git fetch origin && git reset --hard origin/main'
      }
    }
    stage('–ú–∞—Ç—Ä–∏—á–Ω–æ–µ –ø–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') {
      matrix {
        axes {
          axis {
              name 'PLATFORM'
              values 'amd64'
          }
          axis {
              name 'APP'
              values 'k9s', 'helm', 'minikube', 'shellcheck'
          }
        }
        environment {
          APP = "${APP}"
          PLATFORM = "${PLATFORM}"
        }
        stages {
          stage('–ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞') {
            steps {
              sh '''#!/bin/bash
set -ueo pipefail
if [[ "${APP}" == "k9s" ]]; then
  VER="$(curl -s https://api.github.com/repos/derailed/k9s/releases/latest|jq -r '.name')"
  DEB_VER="${VER:1}"
  DEB_NAME="k9s_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    URL="https://github.com/derailed/k9s/releases/download/"${VER}"/k9s_Linux_amd64.tar.gz"
    mkdir -p _k9s/{DEBIAN,usr/local/bin}
    curl -sL "${URL}" | tar -C _k9s/usr/local/bin -xzvf - k9s
    chmod +x _k9s/usr/local/bin/k9s
    cat <<X >_k9s/DEBIAN/control
Package: k9s
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: k9s binary from their github
X
    rm -vf deb/${DEB_NAME%%_*}
    dpkg-deb --build --root-owner-group -z9 _k9s "${DEB_PATH}"
  fi
elif [[ "${APP}" == "helm" ]]; then
  VER="$(curl -s https://api.github.com/repos/helm/helm/releases/latest|jq -r '.tag_name')"
  DEB_VER="${VER:1}"
  DEB_NAME="helm_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    URL="https://get.helm.sh/helm-${VER}-linux-amd64.tar.gz"
    mkdir -p _helm/{DEBIAN,usr/local/bin}
    curl -sL "${URL}" | tar --strip-components 1 -C _helm/usr/local/bin -xzvf - linux-amd64/helm
    chmod +x _helm/usr/local/bin/helm
    cat <<X >_helm/DEBIAN/control
Package: helm
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: helm binary from their github
X
    rm -vf deb/${DEB_NAME%%_*}
    dpkg-deb --build --root-owner-group -z9 _helm "${DEB_PATH}"
  fi
elif [[ "${APP}" == "minikube" ]]; then
  OWNER=kubernetes
  REPO=minikube
  STRIP_COMPONENTS=1
  ORIGINAL_BIN_NAME="minikube-linux-amd64"
  EXTRACT_PATH="out/${ORIGINAL_BIN_NAME}"
  OUR_BIN_NAME="minikube"

  # –û–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ
  DAT="$(curl -s https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)"
  TAG="$(echo "${DAT}"|jq -r '.tag_name')"
  DOWNLOAD_URL="$(echo "${DAT}"|\
    jq -r '.assets[].browser_download_url | select(contains("linux")
      and contains("amd64") and contains(".tar.gz"))')"
  DEB_VER="${TAG:1}"
  DEB_NAME="${APP}_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  UNPACKED_DEB="_${APP}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    mkdir -p "${UNPACKED_DEB}"/{DEBIAN,usr/local/bin}
    curl -sL "${DOWNLOAD_URL}" | tar --strip-components ${STRIP_COMPONENTS} \
      -C "${UNPACKED_DEB}/usr/local/bin" -xzf - "${EXTRACT_PATH}"
    chmod -v +x "${UNPACKED_DEB}"/usr/local/bin/*
    [[ -f "${UNPACKED_DEB}/usr/local/bin/${ORIGINAL_BIN_NAME}" ]] && \
      mv "${UNPACKED_DEB}/usr/local/bin/${ORIGINAL_BIN_NAME}" \
        "${UNPACKED_DEB}/usr/local/bin/${OUR_BIN_NAME}"
    cat <<X >"${UNPACKED_DEB}/DEBIAN/control"
Package: ${APP}
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: Probably official binary from github
X
    rm -vf "deb/${DEB_NAME%%_*}"
    dpkg-deb --build --root-owner-group -z9 "${UNPACKED_DEB}" "${DEB_PATH}"
  fi
elif [[ "${APP}" == "shellcheck" ]]; then
  OWNER=koalaman
  REPO=shellcheck
  STRIP_COMPONENTS=1
  ORIGINAL_BIN_NAME="shellcheck"
  EXTRACT_PATH="shellcheck-v*/${ORIGINAL_BIN_NAME}" # tar xt –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∞—Ä–∏—Ö–≤–∞
  OUR_BIN_NAME=""

  # –û–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ
  DAT="$(curl -s https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)"
  TAG="$(echo "${DAT}"|jq -r '.tag_name')"
  DOWNLOAD_URL="$(echo "${DAT}"|\
    jq -r '.assets[].browser_download_url | select(contains("linux")
      and (contains("amd64") or contains("x86_64"))
      and (contains(".tar.gz") or contains(".tar.xz")))')"
  [[ -z $DOWNLOAD_URL ]] && { echo "DOWNLOAD_URL empty, exit 1"; exit 1; }
  DEB_VER="${TAG:1}"
  DEB_NAME="${APP}_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  UNPACKED_DEB="_${APP}"
  ARCHIVE_NAME_PREFIX="_downloaded_${APP}_"
  ARCHIVE_NAME="${ARCHIVE_NAME_PREFIX}${DEB_VER}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    mkdir -p "${UNPACKED_DEB}"/{DEBIAN,usr/local/bin}

    # –ß–µ—Ä–µ–∑ –ø–∞–π–ø tar –Ω–µ —É–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞, –ø–æ—ç—Ç–æ–º—É —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
    [[ ! -f "${ARCHIVE_NAME}" ]] && {
      rm -vf "${ARCHIVE_NAME_PREFIX}*";
      curl -sL "${DOWNLOAD_URL}" -o "${ARCHIVE_NAME}";
    }

    tar --strip-components ${STRIP_COMPONENTS} \
      -C "${UNPACKED_DEB}/usr/local/bin" -xvf "${ARCHIVE_NAME}" \
      --wildcards "${EXTRACT_PATH}"
    chmod -v +x "${UNPACKED_DEB}"/usr/local/bin/*
    [[ -n "${OUR_BIN_NAME}" ]] && \
      mv "${UNPACKED_DEB}/usr/local/bin/${ORIGINAL_BIN_NAME}" \
        "${UNPACKED_DEB}/usr/local/bin/${OUR_BIN_NAME}"
    cat <<X >"${UNPACKED_DEB}/DEBIAN/control"
Package: ${APP}
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: Probably official binary from github
X
    rm -vf "deb/${DEB_NAME%%_*}"
    dpkg-deb --build --root-owner-group -z9 "${UNPACKED_DEB}" "${DEB_PATH}"
  fi
fi
              '''
            }
          }
        }
      }
    }
    stage('–ú–µ—Ç–∞-–ø–∞–∫–µ—Ç') {
      steps {
        sh '''#!/bin/bash
META_VER=1.4.0
if [[ ! -f deb/rkshvch-desktop-meta_${META_VER}.deb ]]; then
  mkdir -p _meta/DEBIAN
  cat <<X >_meta/DEBIAN/control
Package: rkshvch-desktop-meta
Version: ${META_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: My meta package
Depends: k9s,helm,minikube,shellcheck
X
  rm -vf deb/rkshvch-desktop-meta_*.deb
  dpkg-deb --build --root-owner-group -z9 _meta deb/rkshvch-desktop-meta_${META_VER}.deb
fi
        '''
      }
    }
    stage('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è/—É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏/–ø—É—à –≤ –æ—Ä–∏–¥–∂–∏–Ω') {
      // –ü—Ä–æ–≤–µ—Ä—Ç—å —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: –ø–æ–ª–µ size –ø–æ —Å—Å—ã–ª–∫–µ (–ö–ë):
      // https://api.github.com/repos/rokashevich/rokashevich.github.io
      // —Ç–µ–∫—É—â–µ–µ: 15438
      // TODO: https://stackoverflow.com/questions/4515580/how-do-i-remove-the-old-history-from-a-git-repository
      //
      // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å aptly? https://www.aptly.info/
      steps {
        sh '''#!/bin/bash
[[ $(git status -s|wc -l) > 0 ]] && exit 0
cd deb && dpkg-scanpackages . > Packages
git config --global user.email "rokashevich@gmail.com"
git config --global user.name "robot"
git add -A
git commit --allow-empty-message -m ""
git reset $(git commit-tree HEAD^{tree} -m "üéâ Jenkins Auto Commit")
git push -v -f origin main
git gc --aggressive --prune=all
        '''
      }
    }
    stage('–ü—É—à–∏–º –≤ Pushgateway/Prometheus —Ä–∞–∑–º–µ—Ä github —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è') {
      steps {
        push_to_pushgateway(
          github_repo_size('rokashevich/rokashevich.github.io')
        )
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '**/*.deb'
    }
  }
}