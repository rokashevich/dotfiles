// https://www.jenkins.io/doc/book/pipeline/syntax/#environment
// https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#pipeline-basic-steps
// Локальная информация: https://[JENKINS URL]/jenkins/pipeline-syntax/globals
pipeline {
  agent any
  options {
    skipDefaultCheckout(true)
  }
  stages {
    stage('Подготовка/проверка окружения'){
      steps{
        script {
          env.HOST_WORKSPACE = env.WORKSPACE.replace(
            env.JENKINS_HOME,env.JENKINS_HOME_HOST_PATH)
          if (!env.GITHUB_TOKEN)
            error("В контейнер не проброшен GITHUB_TOKEN!")
        }
      }
    }
    stage('Начальное/разовое клонирование репозитория') {
      when { expression { return !fileExists('.git') }}
      steps {
        sh '''git clone --filter=blob:none --no-checkout \
        https://rokashevich:${GITHUB_TOKEN}@github.com/rokashevich/rokashevich.github.io.git .
        git sparse-checkout set --cone deb
        git checkout main
        cat <<EOF >.gitignore
.gitignore
_*
EOF'''
      }
    }
    stage('Обновление репозитория и общее') {
      steps {
        sh 'env;git fetch origin && git reset --hard origin/main'
      }
    }
    stage('Матричное пакетирование') {
      matrix {
        axes {
          axis {
              name 'PLATFORM'
              values 'amd64'
          }
          axis {
              name 'APP'
              values 'k9s', 'helm', 'minikube', 'shellcheck'
          }
        }
        environment {
          APP = "${APP}"
          PLATFORM = "${PLATFORM}"
        }
        stages {
          stage('Пакетирование отдельного пакета') {
            steps {
              sh '''#!/bin/bash
set -ueo pipefail
if [[ "${APP}" == "k9s" ]]; then
  VER="$(curl -s https://api.github.com/repos/derailed/k9s/releases/latest|jq -r '.name')"
  DEB_VER="${VER:1}"
  DEB_NAME="k9s_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    URL="https://github.com/derailed/k9s/releases/download/"${VER}"/k9s_Linux_amd64.tar.gz"
    mkdir -p _k9s/{DEBIAN,usr/local/bin}
    curl -sL "${URL}" | tar -C _k9s/usr/local/bin -xzvf - k9s
    chmod +x _k9s/usr/local/bin/k9s
    cat <<X >_k9s/DEBIAN/control
Package: k9s
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: k9s binary from their github
X
    rm -vf deb/${DEB_NAME%%_*}
    dpkg-deb --build --root-owner-group -z9 _k9s "${DEB_PATH}"
  fi
elif [[ "${APP}" == "helm" ]]; then
  VER="$(curl -s https://api.github.com/repos/helm/helm/releases/latest|jq -r '.tag_name')"
  DEB_VER="${VER:1}"
  DEB_NAME="helm_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    URL="https://get.helm.sh/helm-${VER}-linux-amd64.tar.gz"
    mkdir -p _helm/{DEBIAN,usr/local/bin}
    curl -sL "${URL}" | tar --strip-components 1 -C _helm/usr/local/bin -xzvf - linux-amd64/helm
    chmod +x _helm/usr/local/bin/helm
    cat <<X >_helm/DEBIAN/control
Package: helm
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: helm binary from their github
X
    rm -vf deb/${DEB_NAME%%_*}
    dpkg-deb --build --root-owner-group -z9 _helm "${DEB_PATH}"
  fi
elif [[ "${APP}" == "minikube" ]]; then
  OWNER=kubernetes
  REPO=minikube
  STRIP_COMPONENTS=1
  ORIGINAL_BIN_NAME="minikube-linux-amd64"
  EXTRACT_PATH="out/${ORIGINAL_BIN_NAME}"
  OUR_BIN_NAME="minikube"

  # Общее для всех проектов на гитхабе
  DAT="$(curl -s https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)"
  TAG="$(echo "${DAT}"|jq -r '.tag_name')"
  DOWNLOAD_URL="$(echo "${DAT}"|\
    jq -r '.assets[].browser_download_url | select(contains("linux")
      and contains("amd64") and contains(".tar.gz"))')"
  DEB_VER="${TAG:1}"
  DEB_NAME="${APP}_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  UNPACKED_DEB="_${APP}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    mkdir -p "${UNPACKED_DEB}"/{DEBIAN,usr/local/bin}
    curl -sL "${DOWNLOAD_URL}" | tar --strip-components ${STRIP_COMPONENTS} \
      -C "${UNPACKED_DEB}/usr/local/bin" -xzf - "${EXTRACT_PATH}"
    chmod -v +x "${UNPACKED_DEB}"/usr/local/bin/*
    [[ -f "${UNPACKED_DEB}/usr/local/bin/${ORIGINAL_BIN_NAME}" ]] && \
      mv "${UNPACKED_DEB}/usr/local/bin/${ORIGINAL_BIN_NAME}" \
        "${UNPACKED_DEB}/usr/local/bin/${OUR_BIN_NAME}"
    cat <<X >"${UNPACKED_DEB}/DEBIAN/control"
Package: ${APP}
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: Probably official binary from github
X
    rm -vf "deb/${DEB_NAME%%_*}"
    dpkg-deb --build --root-owner-group -z9 "${UNPACKED_DEB}" "${DEB_PATH}"
  fi
elif [[ "${APP}" == "shellcheck" ]]; then
  OWNER=koalaman
  REPO=shellcheck
  STRIP_COMPONENTS=1
  ORIGINAL_BIN_NAME="shellcheck"
  EXTRACT_PATH="shellcheck-v*/${ORIGINAL_BIN_NAME}" # tar xt посмотреть что внутри арихва
  OUR_BIN_NAME=""

  # Общее для всех проектов на гитхабе
  DAT="$(curl -s https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)"
  TAG="$(echo "${DAT}"|jq -r '.tag_name')"
  DOWNLOAD_URL="$(echo "${DAT}"|\
    jq -r '.assets[].browser_download_url | select(contains("linux")
      and (contains("amd64") or contains("x86_64"))
      and (contains(".tar.gz") or contains(".tar.xz")))')"
  [[ -z $DOWNLOAD_URL ]] && { echo "DOWNLOAD_URL empty, exit 1"; exit 1; }
  DEB_VER="${TAG:1}"
  DEB_NAME="${APP}_${DEB_VER}_${PLATFORM}.deb"
  DEB_PATH="deb/${DEB_NAME}"
  UNPACKED_DEB="_${APP}"
  ARCHIVE_NAME_PREFIX="_downloaded_${APP}_"
  ARCHIVE_NAME="${ARCHIVE_NAME_PREFIX}${DEB_VER}"
  if [[ ! -f "${DEB_PATH}" ]]; then
    mkdir -p "${UNPACKED_DEB}"/{DEBIAN,usr/local/bin}

    # Через пайп tar не умеет определять формат архива, поэтому через файл
    [[ ! -f "${ARCHIVE_NAME}" ]] && {
      rm -vf "${ARCHIVE_NAME_PREFIX}*";
      curl -sL "${DOWNLOAD_URL}" -o "${ARCHIVE_NAME}";
    }

    tar --strip-components ${STRIP_COMPONENTS} \
      -C "${UNPACKED_DEB}/usr/local/bin" -xvf "${ARCHIVE_NAME}" \
      --wildcards "${EXTRACT_PATH}"
    chmod -v +x "${UNPACKED_DEB}"/usr/local/bin/*
    [[ -n "${OUR_BIN_NAME}" ]] && \
      mv "${UNPACKED_DEB}/usr/local/bin/${ORIGINAL_BIN_NAME}" \
        "${UNPACKED_DEB}/usr/local/bin/${OUR_BIN_NAME}"
    cat <<X >"${UNPACKED_DEB}/DEBIAN/control"
Package: ${APP}
Version: ${DEB_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: Probably official binary from github
X
    rm -vf "deb/${DEB_NAME%%_*}"
    dpkg-deb --build --root-owner-group -z9 "${UNPACKED_DEB}" "${DEB_PATH}"
  fi
fi
              '''
            }
          }
        }
      }
    }
    stage('Мета-пакет') {
      steps {
        sh '''#!/bin/bash
META_VER=1.4.0
if [[ ! -f deb/rkshvch-desktop-meta_${META_VER}.deb ]]; then
  mkdir -p _meta/DEBIAN
  cat <<X >_meta/DEBIAN/control
Package: rkshvch-desktop-meta
Version: ${META_VER}
Architecture: amd64
Maintainer: Rkshvch <rokashevich@gmail.com>
Description: My meta package
Depends: k9s,helm,minikube,shellcheck
X
  rm -vf deb/rkshvch-desktop-meta_*.deb
  dpkg-deb --build --root-owner-group -z9 _meta deb/rkshvch-desktop-meta_${META_VER}.deb
fi
        '''
      }
    }
    stage('Генерация репозитория/удаление истории/пуш в ориджин') {
      // Проверть размер репозитория: поле size по ссылке (КБ):
      // https://api.github.com/repos/rokashevich/rokashevich.github.io
      // текущее: 15438
      steps {
        sh '''
cd deb && dpkg-scanpackages . > Packages

git checkout --orphan newBranch
git branch -D main
git branch -m main
git add -A
git status
git config --global user.email "rokashevich@gmail.com"
git config --global user.name "robot"
git commit -m"Jenkins Auto Commit"
git push -f origin main
git gc --aggressive --prune=all
        '''
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '**/*.deb'
    }
  }
}